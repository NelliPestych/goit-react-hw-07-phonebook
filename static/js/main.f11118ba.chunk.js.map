{"version":3,"sources":["actions.js","operations.js","addnomberFolder/addNomber.js","contacts-selectors.js","contactsFolder/ContactsItem.js","contactsFolder/Contacts.js","filterFolder/Filter.js","phonebookFolder/Phonebook.js","reduce.js","store.js","index.js"],"names":["addContactRequest","createAction","addContactSuccess","addContactError","fetchContactRequest","fetchContactSuccess","fetchContactError","removeContactRequest","removeContactSuccess","removeContactError","inputChangeContact","addContact","name","number","dispatch","actions","axios","post","then","response","data","catch","error","fetchContacts","get","removeContacts","id","delete","AddNomber","state","handleChange","e","setState","target","value","handleChangeNumber","handleSubmit","preventDefault","props","onAddTask","onSubmit","this","type","onChange","Component","mapDispatchToProps","operations","connect","getContacts","contacts","items","getFilter","filter","getLoading","loading","getVisibleContacts","createSelector","contact","toLowerCase","includes","getContactById","contactId","find","ownProps","contactSelectors","onRemoveTask","onClick","contactsAll","TransitionGroup","component","className","map","CSSTransition","key","timeout","classNames","searchAll","Phonebook","onFetchContacts","loadingContacts","in","appear","unmountOnExit","createReducer","action","payload","removehContactRequest","combineReducers","store","configureStore","reducer","reducers","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f11118ba.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\r\n// import types from \"./types\";\r\n// import { uuid } from \"uuidv4\";\r\n\r\nconst addContactRequest = createAction(\"contact/addRequest\");\r\nconst addContactSuccess = createAction(\"contact/addSuccess\");\r\nconst addContactError = createAction(\"contact/addError\");\r\n\r\nconst fetchContactRequest = createAction(\"contact/fetchRequest\");\r\nconst fetchContactSuccess = createAction(\"contact/fetchSuccess\");\r\nconst fetchContactError = createAction(\"contact/fetchError\");\r\n\r\nconst removeContactRequest = createAction(\"contact/removeRequest\");\r\nconst removeContactSuccess = createAction(\"contact/removeSuccess\");\r\nconst removeContactError = createAction(\"contact/removeError\");\r\n\r\nconst inputChangeContact = createAction(\"contact/search\");\r\n\r\nexport default {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  fetchContactRequest,\r\n  fetchContactSuccess,\r\n  fetchContactError,\r\n  removeContactRequest,\r\n  removeContactSuccess,\r\n  removeContactError,\r\n  inputChangeContact,\r\n};\r\n","import axios from \"axios\";\r\nimport actions from \"./actions\";\r\n\r\nconst addContact = ({ name, number }) => dispatch => {\r\n  dispatch(actions.addContactRequest());\r\n\r\n  axios\r\n    .post(\"http://localhost:2000/contacts\", { name, number })\r\n    .then(response => dispatch(actions.addContactSuccess(response.data)))\r\n    .catch(error => dispatch(actions.addContactError(error)));\r\n};\r\n\r\n\r\nconst fetchContacts = () => dispatch => {\r\n    dispatch(actions.fetchContactRequest());\r\n  \r\n    axios\r\n      .get(\"http://localhost:2000/contacts\")\r\n      .then(response => dispatch(actions.fetchContactSuccess(response.data)))\r\n      .catch(error => dispatch(actions.fetchContactError(error)));\r\n  };\r\n\r\n  const removeContacts = id => dispatch => {\r\n    dispatch(actions.removeContactRequest());\r\n  \r\n    axios\r\n      .delete(`http://localhost:2000/contacts/${id}`)\r\n      .then(() => dispatch(actions.removeContactSuccess(id)))\r\n      .catch(error => dispatch(actions.removeContactError(error)));\r\n  };\r\n\r\nexport default {\r\n  addContact,\r\n  fetchContacts,\r\n  removeContacts,\r\n};\r\n","import React, { Component } from \"react\";\r\n// import PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport operations from \"../operations\";\r\n\r\nclass AddNomber extends Component {\r\n  state = {\r\n    name: \"\",\r\n    number: \"\",\r\n  };\r\n\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      name: e.target.value, \r\n    });\r\n  };\r\n\r\n  handleChangeNumber = (e) => {\r\n    this.setState({\r\n      number: e.target.value, \r\n    });\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    this.props.onAddTask(this.state);\r\n    this.setState({\r\n      name: \"\",\r\n      number: \"\",\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <label>\r\n          Name \r\n          <input\r\n            type=\"text\"\r\n            value={this.state.name}\r\n            onChange={this.handleChange}\r\n          />\r\n          Number\r\n          <input\r\n            type=\"text\"\r\n            value={this.state.number}\r\n            onChange={this.handleChangeNumber}\r\n          />\r\n        </label>\r\n        <button type=\"submit\">Add contact</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  onAddTask: operations.addContact,\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(AddNomber);\r\n","import { createSelector } from \"@reduxjs/toolkit\";\r\n\r\nconst getContacts = (state) => state.contacts.items;\r\nconst getLoading = (state) => state.contacts.loading;\r\nconst getFilter = (state) => state.contacts.filter;\r\n\r\nconst getVisibleContacts = createSelector([getContacts, getFilter], (contacts, filter) => {\r\n  return contacts.filter((contact) =>\r\n    contact.name.toLowerCase().includes(filter.toLowerCase())\r\n  );\r\n});\r\n\r\n// const getVisibleContacts = (state) => {\r\n//   const filter = getFilter(state).toLowerCase();\r\n//   const contacts = getContacts(state);\r\n\r\n//   return contacts.filter((contact) =>\r\n//     contact.name.toLowerCase().includes(filter)\r\n//   );\r\n// };\r\n\r\nconst getContactById = (state, contactId) => {\r\n  const contacts = getContacts(state);\r\n  return contacts.find((contact) => contact.id === contactId);\r\n};\r\n\r\nexport default {\r\n  getLoading,\r\n  getFilter,\r\n  getVisibleContacts,\r\n  getContactById,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport operations from \"../operations\";\r\nimport { connect } from \"react-redux\";\r\nimport contactSelectors from \"../contacts-selectors\";\r\n\r\nconst ContactsItem = ({ name, number, onRemoveTask }) => (\r\n    <li>\r\n      <p>\r\n        {name} {number}\r\n      </p>\r\n      <button type=\"button\" onClick={onRemoveTask}>\r\n        Удалить\r\n      </button>\r\n    </li>\r\n);\r\n\r\nContactsItem.propTypes = {\r\n  // id: PropTypes.string.isRequired,\r\n  // name: PropTypes.string.isRequired,\r\n  // number: PropTypes.string.isRequired,\r\n  onRemoveTask: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapState = (state, ownProps) => {\r\n  const contact = contactSelectors.getContactById(state, ownProps.id);\r\n   return {\r\n     ...contact,\r\n   };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => ({\r\n  onRemoveTask: () => dispatch(operations.removeContacts(ownProps.id)),\r\n});\r\n\r\nexport default connect(mapState, mapDispatchToProps)(ContactsItem);\r\n","import React from \"react\";\r\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\r\nimport \"./FadeStyles.css\";\r\nimport ContactsItem from \"./ContactsItem\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport contactSelectors from \"../contacts-selectors\";\r\n\r\nconst Contacts = ({ contactsAll }) => (\r\n  <TransitionGroup component=\"ul\" className=\"fade\">\r\n    {contactsAll.map(({ id }) => (\r\n      <CSSTransition key={id} timeout={250} classNames=\"fade\">\r\n        <ContactsItem\r\n          id={id}\r\n          key={id}\r\n        />\r\n      </CSSTransition>\r\n    ))}\r\n  </TransitionGroup>\r\n);\r\n\r\nContacts.propTypes = {\r\n  contactsAll: PropTypes.array.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    contactsAll: contactSelectors.getVisibleContacts(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(Contacts);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport actions from \"../actions\";\r\nimport contactSelectors from \"../contacts-selectors\";\r\n\r\nconst Filter = ({ searchAll, inputChangeContact }) => (\r\n  <div>\r\n    <input\r\n      type=\"text\"\r\n      value={searchAll}\r\n      onChange={(e) => inputChangeContact(e.target.value)}\r\n    />\r\n  </div>\r\n);\r\n\r\nconst mapStateToProps = (state) => ({\r\n  searchAll: contactSelectors.getFilter(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  inputChangeContact: actions.inputChangeContact,\r\n};\r\n\r\nFilter.propTypes = {\r\n  searchAll: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React, { Component } from \"react\";\r\nimport AddNomber from \"../addnomberFolder/addNomber\";\r\nimport Contacts from \"../contactsFolder/Contacts\";\r\nimport Filter from \"../filterFolder/Filter\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport \"./MyStyles.css\";\r\nimport { connect } from \"react-redux\";\r\nimport operations from \"../operations\";\r\nimport contactSelectors from \"../contacts-selectors\";\r\n\r\nclass Phonebook extends Component {\r\n  componentDidMount() {\r\n    this.props.onFetchContacts();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.props.loadingContacts && <h1>Loading contacts...</h1>}\r\n        <CSSTransition\r\n          in={true}\r\n          appear={true}\r\n          classNames=\"my\"\r\n          timeout={500}\r\n          unmountOnExit\r\n        >\r\n          <h1>Phonebook</h1>\r\n        </CSSTransition>\r\n        <AddNomber />\r\n        <p>Search</p>\r\n        <Filter />\r\n        <p>Contacts</p>\r\n        <Contacts />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  loadingContacts: contactSelectors.getLoading(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  onFetchContacts: operations.fetchContacts,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Phonebook);\r\n","// import types from \"./types\";\r\nimport { createReducer, combineReducers } from \"@reduxjs/toolkit\";\r\nimport actions from \"./actions\";\r\n\r\nconst addContact = (state, action) => {\r\n  return [...state, action.payload];\r\n};\r\n\r\nconst removeContact = (state, action) => {\r\n  return state.filter(contact => contact.id !== action.payload);\r\n};\r\n\r\nconst items = createReducer([], {\r\n  [actions.fetchContactSuccess]: (state, action) => action.payload,\r\n  [actions.addContactSuccess]: addContact,\r\n  [actions.removeContactSuccess]: removeContact,\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [actions.inputChangeContact]: (state, action) => action.payload,\r\n});\r\n\r\n const loading = createReducer(false, {\r\n  [actions.fetchContactRequest]: () => true,\r\n   [actions.addContactRequest]: () => true,\r\n   [actions.removehContactRequest]: () => true,\r\n  [actions.addContactSuccess]: () => false,\r\n  [actions.fetchContactSuccess]: () => false,\r\n  [actions.removeContactSuccess]: () => false,\r\n  [actions.addContactError]: () => false,\r\n   [actions.fetchContactError]: () => false,\r\n  [actions.removeContactError]: () => false,\r\n });\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n  loading,\r\n});\r\n\r\n","import reducers from \"./reduce\";\r\nimport { configureStore } from '@reduxjs/toolkit';\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: reducers,\r\n  }\r\n});\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport Phonebook from \"./phonebookFolder/Phonebook\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <Phonebook />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}